/*
 * Copyright 2023 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import type { ObjectDefinition, OntologyDefinition } from "@osdk/api";
import invariant from "tiny-invariant";
import { describe, it } from "vitest";
import { ConfidentialClientAuth } from ".";
import { BaseFoundryClient } from "./client/foundryClient";
import type { FoundryClientOptions } from "./client/foundryClientOptions";
import type { Auth } from "./oauth-client/Auth";

const OntologyMetadata = {
  ontologyRid: "ri.ontology.main.ontology.a35bb7f9-2c57-4199-a1cd-af461d88bd6e",
  ontologyApiName: "ontology-d097f725-ab77-46cf-83c0-e3cb9186bff1",
  userAgent: "foundry-typescript-osdk/0.62.0",
};

export const Employee = {
  apiName: "Employee",

  properties: {
    /** Username as stored in active directory */
    adUsername: {
      type: "string",
    },
    locationName: {
      type: "string",
      nullable: false,
    },
    locationCity: {
      type: "string",
      nullable: false,
    },
    startDate: {
      type: "datetime",
      nullable: true,
    },
    businessTitle: {
      type: "string",
    },
    employeeNumber: {
      type: "double",
    },
    jobProfile: {
      type: "string",
    },
    locationType: {
      type: "string",
    },
  },
  links: {},
} satisfies ObjectDefinition<"Employee", "Employee">;

const Ontology = {
  metadata: OntologyMetadata,
  objects: {
    Employee: Employee,
  },
} satisfies OntologyDefinition<"Employee">;

// This is what would be generated by the SDK. I just copy pasted for now.
export class FoundryClient<TAuth extends Auth = Auth>
  extends BaseFoundryClient<typeof Ontology, TAuth>
{
  constructor(options: FoundryClientOptions<TAuth>) {
    super(options, Ontology);
  }
}

describe("foo", () => {
  it("foos", async () => {
    const { FOUNDRY_CLIENT_SECRET, FOUNDRY_CLIENT_ID, FOUNDRY_CLIENT_URL } =
      process.env;
    invariant(
      FOUNDRY_CLIENT_SECRET,
      "You need to define a FOUNDRY_CLIENT_SECRET in your env",
    );
    invariant(
      FOUNDRY_CLIENT_URL,
      "You need to define a FOUNDRY_CLIENT_URL in your env",
    );
    invariant(
      FOUNDRY_CLIENT_ID,
      "You need to define a FOUNDRY_CLIENT_ID in your env",
    );

    const client = new FoundryClient({
      auth: new ConfidentialClientAuth({
        clientSecret: FOUNDRY_CLIENT_SECRET,
        clientId: FOUNDRY_CLIENT_ID,
        url: FOUNDRY_CLIENT_URL,
      }),
      url: FOUNDRY_CLIENT_URL,
    });

    // TODO
  });
});
